// <auto-generated />
using System;
using Med.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Med.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Med.Models.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drugs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Spray for running nose.",
                            ImageUrl = "https://www.dropbox.com/scl/fi/i0vh1stcwlhcrw5nspsqo/form_196.jpg?rlkey=oq9tjifcx1kpfl4iqhkgm6fsp&dl=0",
                            Summary = "Nose spray",
                            Title = "Naphazalin",
                            VideoUrl = "https://youtu.be/M8QKjDzb-Os"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Tablets to drink when you catch cold.",
                            ImageUrl = "https://www.dropbox.com/scl/fi/i0vh1stcwlhcrw5nspsqo/form_196.jpg?rlkey=oq9tjifcx1kpfl4iqhkgm6fsp&dl=0",
                            Summary = "White tablets",
                            Title = "Remantadin",
                            VideoUrl = "https://youtu.be/M8QKjDzb-Os"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The best tablets when you have allergy",
                            ImageUrl = "https://www.dropbox.com/scl/fi/i0vh1stcwlhcrw5nspsqo/form_196.jpg?rlkey=oq9tjifcx1kpfl4iqhkgm6fsp&dl=0",
                            Summary = "Allergy tablets",
                            Title = "Parlazin-Neo",
                            VideoUrl = "https://youtu.be/M8QKjDzb-Os"
                        });
                });

            modelBuilder.Entity("Med.Models.PassedTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IsPassed")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("Tries")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("PassedTests");
                });

            modelBuilder.Entity("Med.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "It's safe if use according to instructions",
                            Option1 = "Yes, be careful!",
                            Option2 = "Haha, no, at all.",
                            Option3 = "It's safe if use according to instructions",
                            QuestionText = "Is nose spray dangerous?",
                            TestId = 1
                        },
                        new
                        {
                            Id = 2,
                            Answer = "Yes, it's literally the best!",
                            Option1 = "Yes, but no very much...",
                            Option2 = "No, it's terrible!",
                            Option3 = "Yes, it's literally the best!",
                            QuestionText = "Do you like naphazalin?",
                            TestId = 1
                        },
                        new
                        {
                            Id = 3,
                            Answer = "Up to 5 days",
                            Option1 = "Endlessly",
                            Option2 = "Never",
                            Option3 = "Up to 5 days",
                            QuestionText = "How long can you take it?",
                            TestId = 1
                        });
                });

            modelBuilder.Entity("Med.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DrugId = 1,
                            Points = 10
                        });
                });

            modelBuilder.Entity("Med.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsBlocked")
                        .HasColumnType("int");

                    b.Property<int>("IsEmailConfirmed")
                        .HasColumnType("int");

                    b.Property<int>("IsVerified")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Cardiologist",
                            City = "Brest",
                            Count = 10,
                            Email = "julia.klepaski@gmail.com",
                            FirstName = "Julia",
                            IsBlocked = 0,
                            IsEmailConfirmed = 1,
                            IsVerified = 0,
                            LastLoginDate = new DateTime(2023, 8, 29, 13, 57, 13, 119, DateTimeKind.Local).AddTicks(6408),
                            LastName = "Chistyakova",
                            Password = "1",
                            Region = "Brest region",
                            RegistrationDate = new DateTime(2023, 8, 29, 13, 57, 13, 119, DateTimeKind.Local).AddTicks(6381),
                            Role = "doctor"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Hospital",
                            City = "Brest",
                            Count = 134,
                            Email = "maxon@gmail.com",
                            FirstName = "Maxim",
                            IsBlocked = 0,
                            IsEmailConfirmed = 0,
                            IsVerified = 1,
                            LastLoginDate = new DateTime(2023, 8, 29, 13, 57, 13, 119, DateTimeKind.Local).AddTicks(6420),
                            LastName = "Dulevich",
                            Password = "1",
                            Region = "Brest region",
                            RegistrationDate = new DateTime(2023, 8, 29, 13, 57, 13, 119, DateTimeKind.Local).AddTicks(6418),
                            Role = "doctor"
                        });
                });

            modelBuilder.Entity("Med.Models.PassedTest", b =>
                {
                    b.HasOne("Med.Models.Test", "Test")
                        .WithMany("PassedTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Med.Models.User", "User")
                        .WithMany("PassedTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Med.Models.Question", b =>
                {
                    b.HasOne("Med.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Med.Models.Test", b =>
                {
                    b.HasOne("Med.Models.Drug", "Drug")
                        .WithMany("Tests")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("Med.Models.Drug", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Med.Models.Test", b =>
                {
                    b.Navigation("PassedTests");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Med.Models.User", b =>
                {
                    b.Navigation("PassedTests");
                });
#pragma warning restore 612, 618
        }
    }
}
